현재 코딩 테스트를 준비할 때 필요한 것들을 고려할 점을 여기에 서술하자.

# 특정 함수에 대한 제한을 걸어두고, 스스로 그것을 구현하게 하기
min : 반복문을 사용하자.
max : 반복문을 사용하자.
reverse : 반복문을 사용하자.
*sort : 문자열의 경우 난이도가 높아질 것으로 생각함. 미리 학습이 필요할 것으로 보임.

len: 대체 할 수 있는 게 있는가..? 반복문의 특성을 잘 사용하면 가능하다.
###
def count_length(some_list):
    count = 0
    for element in some_list:
        count += 1
    return count
###

order 찾기 : ok.
###
a = [3, 1, 2]

indices = sorted(
    range(len(a)),
    key=lambda index: a[index]
)

print(indices)
###

# 중복 찾아내기?
set를 사용할 수 있지만 이에 대해서 제한을 건다면 어떻게 할 것인가?
list의 pop를 써서 없앨 수야 있다..


# class(43강 다시보)
오버라이딩 : 상속마다 다른 함수의 역할을 하는 것. 인자의 갯수는 같다.
오버로딩 : 인자의 갯수마다 다른 함수의 역할을 하는 것. 1개일 때랑 2개일 때랑 다르다. range(9)랑 range(1, 9)는 다르지.
isinstance : 해당 클래스인지 확인
__init : 생성자 메서드
__del__ : 소멸자 메서드
인스턴스 변수의 접근 제한: self.__name 과 같이 이용할 수 있다.
데코레이터 기능 : @property (변수처럼 사용가능하게 접근), setter?
클래스 변수 : 클래스 내에 존재하는 변수로 몇 개의 클래스가 생성되었는가 같은 것을 표현할 때 사용 가능하다. 
클래스 메소드 : @classmethod 클래스 변수와 연동해서 사용 가능