
// 먼저 함수 선언식 부터 보자

function kakao(age){
    console.log(age);
}
kakao(99);

// 함수 표현식으로 나타 내 본다면?   함수 이름이 없어도 됨!!

const naver=function(age){
    console.log(age);
}
naver(41);


// 여기서 함수선언식에는 함수 호이스팅이 발생한다.
// 예를들면 위에서 호출하면 (되고 // 안되고) 차이점이 발생함!!

// 에어비엔비 스타일에서 권장하는 함수 표현식이다.

// 함수 표현식을 조금더 간결하게 사용 할 수 있다.

// arrow function

const naver=age=>{console.log(age)}
naver(41);

// -----------------------------------------------------

const google=function(age){
  return age+10
}
console.log(google(40))

const google=age=>age+10;
console.log(google(40));



// -----------------------------------------------------

// 1. fucntion 대신 화살표 => 써도 됨
// 2. 매개변수가 1개면 () 생략 가능         에어비엔비 스타일에서는 넣음
// 3. 매개변수가 필요 없다면 그냥 () 또는 _ 로 표시
// 4. 만약에 바디 안에 식이 1개 라면 {} 그리고 return 도 생략가능

// -----------------------------------------------------

// 하나만 더 붙이자면..

// 다른 언어에도 있는 기능이긴 한데

// defalut argument (argument가 없을떄!!)

const naver=(age,t=300)=>{console.log(age,t)}
naver(41);


// 자바스크립트 특이한점? 장점!!
// 매개변수를 여러개 사용할떄 편하게 사용가능하다.
// 스프레드 오퍼레이터를 사용할 수 있다.

kakao(99,44,97,13);
function kakao(age,...rest){
    console.log(age,...rest);
}

// -----------------------------------------------------

const naver=(age,...rest)=>{console.log(age)}
naver(41,34,36,67);

// -----------------------------------------------------

// 매개변수와 인자의 개수 불일치도 허용해 준다!!
const naver=(age,age2)=>{console.log(age,age2)}
naver(41,34,36,67);

// 즉시 실행 함수를 보자.
// 즉시실행 함수 한번만 실행하고 없어짐
// // 기본 폼은 다음과 같다.

(function () {
  console.log("a")
})();

// 예를 적어 보자면
(function(num) {console.log(num ** 3) })(2);

// 즉시 실행 함수는 한 번의 실행만 필요로 하는 초기화 코드 부분에 많이 사용된다.
// 그 이유는 변수를 전역으로 너무 많이 선언하는 것을 피하기 위해서 이다.
// 전역에 변수를 추가하지 않아도 되기 때문에 코드 충돌 없이 구현할 수 있다.

// 주의: 즉시 실행 함수 사용 시에는 전 문장에서 
// 세미콜론을 이용하여 해당 문장이 끝났다고 말을 해줘야 한다. 
// 그렇지 않으면 에러가 난다.

//===========================================================================

// 이번에는 ARRAY 배열을 살펴보자 !!
// 리스트랑 너무 비슷함

const a=[1,2,3,4,5];

a.reverse();

a.push(6,7,8,[1,2,3]);  // 맨 뒤 추가
console.log(a);

a.pop();                // 맨 뒤 제거
console.log(a);

a.unshift(9);       // 맨 앞에 값 추가
console.log(a);

a.shift();          // 맨 앞 값 제거
console.log(a);

const result=a.indexOf(3);  // 값 3이 있는 인덱스를 출력 
console.log(result)        // 없으면 -1 반환

const ret2=a.includes(3) // 원하는 값이 있으면 ture 반환
console.log(ret2)

const ret=a.join('/')// 구분자(/)를 이용해서 문자열로 연결
console.log(ret)
//const ret=a.join('') 하면 배열값을 하나의 문자열로 연결가능


// 헬퍼 메서드 // 고차함수 라는 것을 보자

// forEach
// map
// filter
// reduce
// find
// some
// every
// 이 메서드의 인자값은 함수가 될 것이다. 
// (인자값으로 활용하는 함수 -> 콜백함수)


// foreach문 사용 = for문과 같음!! (break continue 사용불가)

const num=[8,5,2,1]
num.forEach(ele=>console.log(ele));

//함수선언식으로도 가능
num.forEach(function test(ele){console.log(ele)});

// 사실 for문 돌리면 됨
for(let x=0;x<num.length;x++){
    console.log(num[x]);
}


//-------------

const num=[8,5,2,1]
let num2=[]

// 8 5 2 1 을 2를 곱한 값으로 새로운 배열을 만들어보자. [16 10 4 2] 만들어 보자

for(let x=0;x<num.length;x++){
    num2.push(num[x]*2)
}
console.log(num2)

// // map 사용!!
// // map은 리턴값이 있어서 기존 배열을 이용해서 다른배열 만들때사용

const t=num.map(ele=>ele*2);
console.log(t)

//-------------

const num=[8,5,2,1]

// // 짝수만 새로운 리스트에 담아 보자
// // 사실 for문 돌리면 됨

num2=[]
for(let x=0;x<num.length;x++){
    if(num[x]%2===0){
       num2.push(num[x]) 
    }
}
console.log(num2)

// // filter 함수 사용 - 반환값이 참인 것만!! 반환하는 함수
 const f=num.filter(ele=>ele%2===0)
 console.log(f)


//[연습문제] type이 'fruit'인 것들의 name을 출력해보자
const products = [
  { name: 'cucumber', type: 'vegetable' },
  { name: 'banana', type: 'fruit' },
  { name: 'carrot', type: 'vegetable' },
  { name: 'apple', type: 'fruit' },
]

const answer=products.filter(ele=>ele.type==='fruit')
console.log(answer)

const ans=answer.map(ele=>ele.name)
console.log(ans)


// find 함수 사용 

const num=[8,9,5,2,1,9]
const j=9
const findj=num.find(ele=>ele===j)
console.log(findj)

// 값 있으면 첫번째 요소 반환
// 없으면 undefind


// 배열안의 값이 모두 3보다 큰지 확인
// every 함수 사용가능 true / false 반환

const num=[8,5,2,1]
const e=num.every(ele=>ele>3)
console.log(e)

// 배열안의 값이 하나라도 0보다 큰지 확인
const num=[8,5,2,1]
const s=num.some(ele=>ele>3)
console.log(s)
// some 함수 사용가능 true / false 반환


const num=[8,5,2,1]
//sum 을 구해보자
let sum=0
for(let x=0;x<num.length;x++){
    sum+=num[x];
}
console.log(sum)

// // reduce 를 보자

const getsum=num.reduce((acc,cur)=>acc+=cur,0)
console.log(getsum)

// acc = 누적값을 의미
// cur = 순회되는 값을 의미
// ,0 = acc에 들어갈 초기값 (0일경우 생략가능)


// 추가로 문자열도 한번 보자
let str ="aasdf";

const t=str.includes('n'); // include - 존재여부 확인시 사용
console.log(t)             // 있으면 T 없으면 F 반환

const t2=str.split('');   // s를 기준으로 가르기인데 없는문자면 통으로
console.log(t2)           // '' 넣으면 각각 한글자씩 배열에 담아 반환
                           
const t3=str.replace('s','z'); 
console.log(t3)

const t4=str.replace('a','gg');
console.log(t4)

const t5=str.replaceAll('a','zxcv');
// 모든 a를 zxcv로 바꾸기
console.log(t5)


let str2="  d   abab   d  ";

let b=str2.trim(' ') // 앞뒤공백제거
let c=str2.replaceAll(' ','') // 모든공백제거
let d=str2.trimStart(' ')  // 앞공백 제거
let e=str2.trimEnd(' ')     // 뒷 공백 제거

console.log(str2)
console.log(b)
console.log(c)
console.log(d)
console.log(e)


// 객체

fastfood={
  a:1,
  "bbq":"gold_olive",
  "ham burger":{
      b:1,
      c:2
  },
  abc:function (){
      console.log('hi')
  },
}
  // abc(){
  //   console.log('hi') // 매서드 선언시 function 생략 가능
  // }
console.log(fastfood.a)
console.log(fastfood.bbq)
console.log(fastfood["ham burger"].c)
// 주의 
// 객체이름 햄버거에 띄어쓰기 있으면 
// [" "] 사용해야 함
fastfood.abc()


// =================================

const friends=['kevin','bob','kate']
const age=[26,25,27]

// 객체를 하나 만들어 보자
let index=1

const school={
    friends:friends,
    age:age,
    // 객체의 key값을 동적으로 생성이 가능하다
    [friends[index]]:age[index]
}

console.log(school)


// 속성명 축약
const friends=['kevin','bob','kate']
const age=[26,25,27]

// 그리고 key와 할당하는 변수의 이름이 같으면
// 축약 가능!!<속성명 축약>이라고 함

const school2={
    friends,
    age,
}
console.log(school2)

// 많이 쓰는 객체관련 문법 하나 더 보자

// 객체문법1: 메서드명 축약 (functio 안써도 됨)
// 객체문법2: key값을 동적으로 가능
// 객체문법3: 속성명 축약 (key 값과 할당받는변수이름이 같을 경우)
// 객체문법4 : destructuring

// 객체문법4 : destructuring
// 배열 또는 객체를 분해한 후
// 변수하나 만들어서 할당하는것

const user={
    name1:"minho",
    name2:"bbq",
    gender: "male",
}

// minho랑 male 출력해보자
console.log(user.name1,user.gender)

// 변수를 선언 후에 객체 value를 넣어서 출력해보자
const name1=user.name1;
const gender=user.gender;
console.log(name1,gender)

// 그런데 위와 같이 변수명과 객체의 키값이 같다면
const{name1}=user;
const{gender}=user;
console.log(name1,gender)

// 이렇게 쓸 수도 있다
const{name1,gender}=user;
 //묶어서 쓸 수도 있다
console.log(name1,gender)

// =========================================

// 객체문법5 : spread

const user=['kevin','bob','kate']
console.log(...user)

// spread 신텍스를 배열에 사용 할 수 있었고
// 객체에도 사용 가능하다!!

const ban={
    name3:"kfc",
    name4:"mc",   
}

const user={
    name1:"Minho",
    name2:"bbq",
    //ban:ban,  // 통으로 들어감
    ...ban
}

console.log(user)

// json 객체관련 문법


// json 은 자바스크립트와 다르게
// key에는 반드시 따옴표를 넣고 특히 쌍따옴표를 넣어야 함!!

// 그래서 자바스크립트 객체를 제이슨 형식으로 변환할때 
// key 값에 쌍따움표 들어간다. 
// 이때 JSON.stringify 를 사용해서 
// 객체를string화 시킨다.

const user={
    name1:"minho",
    name2:"bbq",
    gender: "male",
    test:[1,2,3,4],
}

const Obj_to_Json=JSON.stringify(user)
console.log(Obj_to_Json)
console.log(typeof Obj_to_Json)  // 타입이 string


// 이번에는 json파일을 반대로 객체화 시키는것

const Json_to_Obj=JSON.parse(Obj_to_Json)
console.log(Json_to_Obj)
console.log(typeof Json_to_Obj)

// ==================================================

// // 객체에서의 this
// // this -> 자기참조 변수

// // 결론
// // 결론부터 말하자면 this는 어떤 방식으로 
// // 호출 되었는가에 따라
// // 가르키는 것이 달라진다!! (만능)이럴때는 이게 이거고 저럴때는 이게 이거다.

// // 일반함수로 호출 되었을때 : 전역객체(window) 브라우저의 최상위 객체
// // 매서드로 호출 되었을때 : 매서드를 호출한 "그"객체!!
// // 생성자 함수로 호출되었을때 : 미래에 생성할 인스턴스!!

// // 1. 일반함수에서 의this는 전역객체를 말한다.
const fc=()=>{console.log(this)}
fc();


// 자바스크립트보다 상위 객체인 window
// 자바스크립트 객체의 구조를 보면

//       window
// dom            bom 
// 타이틀          네비바
// 헤드            뒤로가기 즐겨찾기 북마크 등등..
// 바디

// 돔(화면에 보이는 부분)
// 봄(뒤로가기 앞으로가기 새로고침 프린트 등의 브라우저 인터페이스

// // 2. 매서드로 호출 되었을때 : 매서드를 호출한 "그"객체!!

const obj={
    a:1,
    b(){
        console.log(this)
    },
}
obj.b();

// 생성자 함수로 호출되었을때 : 미래에 생성할 인스턴스!!
// 생성자 함수란 - 객체를 생성하기 위한 틀 프레임

// 만약에 key=name이고 value가 choi 인 객체를 3개 만든다면?
const a1={
    name1:"choi",
}
 
const b1={
    name1:"choi",
}
 
const c1={
    name1:"choi",
}

// 조금더 효율적으로 하자.
// 함수를 사용해서 객체를 찍어 내자.
// 생성자 함수 만드는 방법은 

// 생성자 함수는 함수명을 대문자로 많이 시작한다.
function Test(name){         
  this.name=name
}

// 2 객체를 생성자 함수를 통해서 찍어낸다.
const d1=new Test('choi')
const e1=new Test('choi')

// 이것이 세번째 생성자 함수 안에서의 this 이고
// this 가 의미 하는것은 새로 생성 될 인스턴스를 의미한다.


